---

---
<falcon-theme-controller>
    <label class="flex items-center cursor-pointer gap-2">
        <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round">
            <circle cx="12" cy="12" r="5"/>
            <path
                    d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"/>
        </svg>
        <input type="checkbox"
               value="synthwave"
               class="toggle theme-controller"/>
        <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
    </label>
</falcon-theme-controller>

<script>
    enum Theme {
        synthwave = 'synthwave',
        light = 'light'
    }

    /** Key in `localStorage` to store color theme preference at. */
    const storageKey = 'falcon-theme';

    /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
    const parseTheme = (theme: unknown): Theme => {
        switch (theme) {
            case 'light':
                return Theme.light;
            case 'synthwave':
                return Theme.synthwave;
            default:
                return getPreferredColorScheme()
        }
    }

    /** Load the user’s preference from `localStorage`. */
    const loadTheme = (): Theme =>
        parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));

    /** Store the user’s preference in `localStorage`. */
    function storeTheme(theme: Theme): void {
        if (typeof localStorage !== 'undefined') {
            localStorage.setItem(storageKey, theme);
        }
    }

    /** Get the preferred system color scheme. */
    const getPreferredColorScheme = (): Theme =>
        matchMedia('(prefers-color-scheme: light)').matches ? Theme.light : Theme.synthwave;

    /** Update select menu UI, document theme, and local storage state. */
    function onThemeChange(theme: Theme): void {
        document.documentElement.dataset.theme = theme;
        storeTheme(theme);
    }

    class FalconThemeController extends HTMLElement {
        constructor() {
            super();
            const input = this.querySelector<HTMLInputElement>('input[type="checkbox"].theme-controller');
            if (input) {
                input.checked = loadTheme() === Theme.synthwave;
                input.addEventListener('change', (e) => {
                    if (e.currentTarget instanceof HTMLInputElement) {
                        onThemeChange(e.currentTarget.checked ? Theme.synthwave : Theme.light);
                    }
                });
            }
        }
    }

    customElements.define('falcon-theme-controller', FalconThemeController);
</script>
